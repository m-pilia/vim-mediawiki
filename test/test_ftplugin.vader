Before:
  unlet! b:did_ftplugin
  let g:vim_mediawiki_mappings = 0
  let g:vim_mediawiki_preloaded_wikilangs = []
  let g:vim_mediawiki_ignored_wikilangs = []
  let g:vim_mediawiki_wikilang_map = {}


After:
  unlet! b:did_ftplugin
  unlet! g:loaded_surround
  unlet! g:vim_mediawiki_mappings
  unlet! g:vim_mediawiki_surround
  unlet! b:vim_mediawiki_surround_wikilink
  unlet! b:vim_mediawiki_surround_template
  unlet! b:vim_mediawiki_surround_bold
  unlet! b:vim_mediawiki_surround_italic
  unlet! g:vim_mediawiki_preloaded_wikilangs
  unlet! g:vim_mediawiki_ignored_wikilangs
  unlet! g:vim_mediawiki_wikilang_map
  mapclear


Execute(Test settings):
  runtime macros/matchit.vim
  let g:loaded_surround = 1

  let g:vim_mediawiki_surround = 1
  let b:vim_mediawiki_surround_wikilink = 'a'
  let b:vim_mediawiki_surround_template = 'b'
  let b:vim_mediawiki_surround_bold = 'c'
  let b:vim_mediawiki_surround_italic = 'd'

  runtime ftplugin/mediawiki.vim

  AssertEqual 'n:#,n:*,n::,s:{|,m:|,ex:|}', &comments
  AssertEqual 'getline(v:lnum)=~''^\(=\+\)[^=]\+\1\(\s*<!--.*-->\)\=\s*$''?">".(len(matchstr(getline(v:lnum),''^=\+''))-1):"="', &foldexpr
  AssertEqual 'expr', &foldmethod
  Assert &formatoptions =~# 'r', 'formatoptions r not correctly set'
  Assert &formatoptions =~# 'o', 'formatoptions o not correctly set'
  Assert &formatoptions =~# 'q', 'formatoptions q not correctly set'
  Assert &formatoptions =~# 'l', 'formatoptions l not correctly set'
  Assert &formatoptions !~# 't', 'formatoptions t not correctly set'
  Assert &formatoptions !~# 'c', 'formatoptions c not correctly set'
  Assert &formatoptions !~# 'a', 'formatoptions a not correctly set'
  AssertEqual 1, exists('b:match_words')
  AssertEqual 1, exists('b:match_ignorecase')
  AssertEqual 1, &wrap
  AssertEqual 1, &linebreak
  AssertEqual 0, &textwidth
  AssertEqual "[[\r|]]", b:surround_{char2nr('a')}
  AssertEqual "{{\r}}", b:surround_{char2nr('b')}
  AssertEqual "'''\r'''", b:surround_{char2nr('c')}
  AssertEqual "''\r''", b:surround_{char2nr('d')}


Execute(Test double load):
  runtime ftplugin/mediawiki.vim

  AssertEqual 1, b:did_ftplugin

  " Test double load
  runtime ftplugin/mediawiki.vim

  AssertEqual 1, b:did_ftplugin


Execute(Test no default mappings):
  runtime ftplugin/mediawiki.vim

  AssertNoMapping 'nmap', 'j'
  AssertNoMapping 'nmap', 'k'
  AssertNoMapping 'nmap', '0'
  AssertNoMapping 'nmap', '^'
  AssertNoMapping 'nmap', '$'
  AssertNoMapping 'nmap', 'D'
  AssertNoMapping 'nmap', 'C'
  AssertNoMapping 'nmap', 'A'


Execute(Test mappings):
  let g:vim_mediawiki_mappings = 1

  runtime ftplugin/mediawiki.vim

  AssertMapping 'nmap', 'j', "v:count == 0 ? 'gj' : 'j'"
  AssertMapping 'nmap', 'k', "v:count == 0 ? 'gk' : 'k'"
  AssertMapping 'nmap', '0', 'g0'
  AssertMapping 'nmap', '^', 'g^'
  AssertMapping 'nmap', '$', 'g$'
  AssertMapping 'nmap', 'D', 'dg$'
  AssertMapping 'nmap', 'C', 'cg$'
  AssertMapping 'nmap', 'A', 'g$a'


Given(Text with bold/italic delimiters):
  Some text.
  This is an '''example''' of text.
  Some more text.
Execute(Load ftplugin):
  runtime ftplugin/mediawiki.vim
  vmap <silent> <buffer> i' <plug>(mediawiki-text-object-inside-tick)
  omap <buffer> i' <plug>(mediawiki-text-object-inside-tick)
Do(Delete using text object for inside bold/italic):
  2gg
  18|
  di'
Expect(Text inside delimiters is removed):
  Some text.
  This is an '''''' of text.
  Some more text.


Given(Text with bold/italic delimiters):
  Some text.
  This is an '''example''' of text.
  Some more text.
Execute(Load ftplugin):
  runtime ftplugin/mediawiki.vim
  vmap <silent> <buffer> a' <plug>(mediawiki-text-object-around-tick)
  omap <buffer> a' <plug>(mediawiki-text-object-around-tick)
Do(Delete using text object for around bold/italic):
  2gg
  18|
  da'
Expect(Text around delimiters is removed):
  Some text.
  This is an  of text.
  Some more text.


Given(Text with heading delimiters):
  Example text.
  Some== Example heading ==
  Example paragraph.
Execute(Load ftplugin):
  runtime ftplugin/mediawiki.vim
  vmap <silent> <buffer> ih <plug>(mediawiki-text-object-inside-heading)
  omap <buffer> ih <plug>(mediawiki-text-object-inside-heading)
Do(Delete using text object for inside heading):
  2gg
  15|
  dih
Expect(Text inside delimiters is removed):
  Example text.
  Some====
  Example paragraph.


Given(Text with heading delimiters):
  Example text.
  Some== Example heading ==
  Example paragraph.
Execute(Load ftplugin):
  runtime ftplugin/mediawiki.vim
  vmap <silent> <buffer> ah <plug>(mediawiki-text-object-around-heading)
  omap <buffer> ah <plug>(mediawiki-text-object-around-heading)
Do(Delete using text object for around heading):
  2gg
  15|
  dah
Expect(Text around delimiters is removed):
  Example text.
  Some
  Example paragraph.
